// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(<string>value));
    }
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }

  get collections(): Array<string> {
    let value = this.get("collections");
    return value!.toStringArray();
  }

  set collections(value: Array<string>) {
    this.set("collections", Value.fromStringArray(value));
  }

  get nftsOwnedOrListed(): Array<string> {
    let value = this.get("nftsOwnedOrListed");
    return value!.toStringArray();
  }

  set nftsOwnedOrListed(value: Array<string>) {
    this.set("nftsOwnedOrListed", Value.fromStringArray(value));
  }

  get nftMarketAuctions(): Array<string> {
    let value = this.get("nftMarketAuctions");
    return value!.toStringArray();
  }

  set nftMarketAuctions(value: Array<string>) {
    this.set("nftMarketAuctions", Value.fromStringArray(value));
  }

  get nftBidsPlaced(): Array<string> {
    let value = this.get("nftBidsPlaced");
    return value!.toStringArray();
  }

  set nftBidsPlaced(value: Array<string>) {
    this.set("nftBidsPlaced", Value.fromStringArray(value));
  }

  get nftBidsAccepted(): Array<string> {
    let value = this.get("nftBidsAccepted");
    return value!.toStringArray();
  }

  set nftBidsAccepted(value: Array<string>) {
    this.set("nftBidsAccepted", Value.fromStringArray(value));
  }

  get nftHistory(): Array<string> {
    let value = this.get("nftHistory");
    return value!.toStringArray();
  }

  set nftHistory(value: Array<string>) {
    this.set("nftHistory", Value.fromStringArray(value));
  }
}

export class Creator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Creator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Creator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Creator", id.toString(), this);
    }
  }

  static load(id: string): Creator | null {
    return changetype<Creator | null>(store.get("Creator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }

  get nftContracts(): Array<string> | null {
    let value = this.get("nftContracts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nftContracts(value: Array<string> | null) {
    if (!value) {
      this.unset("nftContracts");
    } else {
      this.set("nftContracts", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class NftContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftContract", id.toString(), this);
    }
  }

  static load(id: string): NftContract | null {
    return changetype<NftContract | null>(store.get("NftContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get baseURI(): string | null {
    let value = this.get("baseURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set baseURI(value: string | null) {
    if (!value) {
      this.unset("baseURI");
    } else {
      this.set("baseURI", Value.fromString(<string>value));
    }
  }

  get nfts(): Array<string> {
    let value = this.get("nfts");
    return value!.toStringArray();
  }

  set nfts(value: Array<string>) {
    this.set("nfts", Value.fromStringArray(value));
  }

  get collectors(): Array<string> | null {
    let value = this.get("collectors");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set collectors(value: Array<string> | null) {
    if (!value) {
      this.unset("collectors");
    } else {
      this.set("collectors", Value.fromStringArray(<Array<string>>value));
    }
  }

  get maxTokenID(): BigInt | null {
    let value = this.get("maxTokenID");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxTokenID(value: BigInt | null) {
    if (!value) {
      this.unset("maxTokenID");
    } else {
      this.set("maxTokenID", Value.fromBigInt(<BigInt>value));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get artist(): string | null {
    let value = this.get("artist");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set artist(value: string | null) {
    if (!value) {
      this.unset("artist");
    } else {
      this.set("artist", Value.fromString(<string>value));
    }
  }
}

export class Nft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Nft entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Nft must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Nft", id.toString(), this);
    }
  }

  static load(id: string): Nft | null {
    return changetype<Nft | null>(store.get("Nft", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftContract(): string {
    let value = this.get("nftContract");
    return value!.toString();
  }

  set nftContract(value: string) {
    this.set("nftContract", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenIPFSPath(): string {
    let value = this.get("tokenIPFSPath");
    return value!.toString();
  }

  set tokenIPFSPath(value: string) {
    this.set("tokenIPFSPath", Value.fromString(value));
  }

  get tokenBaseUri(): string {
    let value = this.get("tokenBaseUri");
    return value!.toString();
  }

  set tokenBaseUri(value: string) {
    this.set("tokenBaseUri", Value.fromString(value));
  }

  get creator(): string | null {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set creator(value: string | null) {
    if (!value) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromString(<string>value));
    }
  }

  get dateMinted(): BigInt | null {
    let value = this.get("dateMinted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateMinted(value: BigInt | null) {
    if (!value) {
      this.unset("dateMinted");
    } else {
      this.set("dateMinted", Value.fromBigInt(<BigInt>value));
    }
  }

  get contractType(): string | null {
    let value = this.get("contractType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contractType(value: string | null) {
    if (!value) {
      this.unset("contractType");
    } else {
      this.set("contractType", Value.fromString(<string>value));
    }
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get ownedOrListedBy(): string | null {
    let value = this.get("ownedOrListedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ownedOrListedBy(value: string | null) {
    if (!value) {
      this.unset("ownedOrListedBy");
    } else {
      this.set("ownedOrListedBy", Value.fromString(<string>value));
    }
  }

  get isFirstSale(): boolean {
    let value = this.get("isFirstSale");
    return value!.toBoolean();
  }

  set isFirstSale(value: boolean) {
    this.set("isFirstSale", Value.fromBoolean(value));
  }

  get auctions(): Array<string> | null {
    let value = this.get("auctions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set auctions(value: Array<string> | null) {
    if (!value) {
      this.unset("auctions");
    } else {
      this.set("auctions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get mostRecentAuction(): string | null {
    let value = this.get("mostRecentAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mostRecentAuction(value: string | null) {
    if (!value) {
      this.unset("mostRecentAuction");
    } else {
      this.set("mostRecentAuction", Value.fromString(<string>value));
    }
  }

  get bids(): Array<string> | null {
    let value = this.get("bids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bids(value: Array<string> | null) {
    if (!value) {
      this.unset("bids");
    } else {
      this.set("bids", Value.fromStringArray(<Array<string>>value));
    }
  }

  get latestFinalizedAuction(): string | null {
    let value = this.get("latestFinalizedAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestFinalizedAuction(value: string | null) {
    if (!value) {
      this.unset("latestFinalizedAuction");
    } else {
      this.set("latestFinalizedAuction", Value.fromString(<string>value));
    }
  }

  get nftOffers(): Array<string> | null {
    let value = this.get("nftOffers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nftOffers(value: Array<string> | null) {
    if (!value) {
      this.unset("nftOffers");
    } else {
      this.set("nftOffers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get nftHighestOffer(): string | null {
    let value = this.get("nftHighestOffer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftHighestOffer(value: string | null) {
    if (!value) {
      this.unset("nftHighestOffer");
    } else {
      this.set("nftHighestOffer", Value.fromString(<string>value));
    }
  }

  get nftHighestOfferAmount(): BigDecimal | null {
    let value = this.get("nftHighestOfferAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set nftHighestOfferAmount(value: BigDecimal | null) {
    if (!value) {
      this.unset("nftHighestOfferAmount");
    } else {
      this.set(
        "nftHighestOfferAmount",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get mostRecentOffer(): string | null {
    let value = this.get("mostRecentOffer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mostRecentOffer(value: string | null) {
    if (!value) {
      this.unset("mostRecentOffer");
    } else {
      this.set("mostRecentOffer", Value.fromString(<string>value));
    }
  }

  get mostRecentBuyNow(): string | null {
    let value = this.get("mostRecentBuyNow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mostRecentBuyNow(value: string | null) {
    if (!value) {
      this.unset("mostRecentBuyNow");
    } else {
      this.set("mostRecentBuyNow", Value.fromString(<string>value));
    }
  }

  get nftBuyNows(): Array<string> | null {
    let value = this.get("nftBuyNows");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nftBuyNows(value: Array<string> | null) {
    if (!value) {
      this.unset("nftBuyNows");
    } else {
      this.set("nftBuyNows", Value.fromStringArray(<Array<string>>value));
    }
  }

  get nftFixedPriceSale(): string | null {
    let value = this.get("nftFixedPriceSale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftFixedPriceSale(value: string | null) {
    if (!value) {
      this.unset("nftFixedPriceSale");
    } else {
      this.set("nftFixedPriceSale", Value.fromString(<string>value));
    }
  }

  get nftPrimarySaleAuction(): string | null {
    let value = this.get("nftPrimarySaleAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftPrimarySaleAuction(value: string | null) {
    if (!value) {
      this.unset("nftPrimarySaleAuction");
    } else {
      this.set("nftPrimarySaleAuction", Value.fromString(<string>value));
    }
  }

  get nftHistory(): Array<string> {
    let value = this.get("nftHistory");
    return value!.toStringArray();
  }

  set nftHistory(value: Array<string>) {
    this.set("nftHistory", Value.fromStringArray(value));
  }

  get activeAuction(): string | null {
    let value = this.get("activeAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set activeAuction(value: string | null) {
    if (!value) {
      this.unset("activeAuction");
    } else {
      this.set("activeAuction", Value.fromString(<string>value));
    }
  }

  get activePrimarySaleAuction(): string | null {
    let value = this.get("activePrimarySaleAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set activePrimarySaleAuction(value: string | null) {
    if (!value) {
      this.unset("activePrimarySaleAuction");
    } else {
      this.set("activePrimarySaleAuction", Value.fromString(<string>value));
    }
  }

  get activeBuyNow(): string | null {
    let value = this.get("activeBuyNow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set activeBuyNow(value: string | null) {
    if (!value) {
      this.unset("activeBuyNow");
    } else {
      this.set("activeBuyNow", Value.fromString(<string>value));
    }
  }

  get activeFixedPriceSale(): string | null {
    let value = this.get("activeFixedPriceSale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set activeFixedPriceSale(value: string | null) {
    if (!value) {
      this.unset("activeFixedPriceSale");
    } else {
      this.set("activeFixedPriceSale", Value.fromString(<string>value));
    }
  }

  get activeSalePriceInETH(): BigDecimal | null {
    let value = this.get("activeSalePriceInETH");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set activeSalePriceInETH(value: BigDecimal | null) {
    if (!value) {
      this.unset("activeSalePriceInETH");
    } else {
      this.set("activeSalePriceInETH", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lastSalePriceInETH(): BigDecimal | null {
    let value = this.get("lastSalePriceInETH");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lastSalePriceInETH(value: BigDecimal | null) {
    if (!value) {
      this.unset("lastSalePriceInETH");
    } else {
      this.set("lastSalePriceInETH", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class NftTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftTransfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftTransfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftTransfer", id.toString(), this);
    }
  }

  static load(id: string): NftTransfer | null {
    return changetype<NftTransfer | null>(store.get("NftTransfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value!.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }

  get dateTransferred(): BigInt {
    let value = this.get("dateTransferred");
    return value!.toBigInt();
  }

  set dateTransferred(value: BigInt) {
    this.set("dateTransferred", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FixedPriceSaleMint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FixedPriceSaleMint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FixedPriceSaleMint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FixedPriceSaleMint", id.toString(), this);
    }
  }

  static load(id: string): FixedPriceSaleMint | null {
    return changetype<FixedPriceSaleMint | null>(
      store.get("FixedPriceSaleMint", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fixedPriceSale(): string {
    let value = this.get("fixedPriceSale");
    return value!.toString();
  }

  set fixedPriceSale(value: string) {
    this.set("fixedPriceSale", Value.fromString(value));
  }

  get buyer(): string | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyer(value: string | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromString(<string>value));
    }
  }

  get count(): BigInt | null {
    let value = this.get("count");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set count(value: BigInt | null) {
    if (!value) {
      this.unset("count");
    } else {
      this.set("count", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class AuctionPrimarySale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionPrimarySale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionPrimarySale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionPrimarySale", id.toString(), this);
    }
  }

  static load(id: string): AuctionPrimarySale | null {
    return changetype<AuctionPrimarySale | null>(
      store.get("AuctionPrimarySale", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMarketContract(): string {
    let value = this.get("nftMarketContract");
    return value!.toString();
  }

  set nftMarketContract(value: string) {
    this.set("nftMarketContract", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auctionId(): BigInt {
    let value = this.get("auctionId");
    return value!.toBigInt();
  }

  set auctionId(value: BigInt) {
    this.set("auctionId", Value.fromBigInt(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get nftContract(): string {
    let value = this.get("nftContract");
    return value!.toString();
  }

  set nftContract(value: string) {
    this.set("nftContract", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get transactionHashCreated(): Bytes {
    let value = this.get("transactionHashCreated");
    return value!.toBytes();
  }

  set transactionHashCreated(value: Bytes) {
    this.set("transactionHashCreated", Value.fromBytes(value));
  }

  get dateStarted(): BigInt | null {
    let value = this.get("dateStarted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateStarted(value: BigInt | null) {
    if (!value) {
      this.unset("dateStarted");
    } else {
      this.set("dateStarted", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateUpdated(): BigInt | null {
    let value = this.get("dateUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateUpdated(value: BigInt | null) {
    if (!value) {
      this.unset("dateUpdated");
    } else {
      this.set("dateUpdated", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateEnding(): BigInt | null {
    let value = this.get("dateEnding");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateEnding(value: BigInt | null) {
    if (!value) {
      this.unset("dateEnding");
    } else {
      this.set("dateEnding", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateCanceled(): BigInt | null {
    let value = this.get("dateCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateCanceled(value: BigInt | null) {
    if (!value) {
      this.unset("dateCanceled");
    } else {
      this.set("dateCanceled", Value.fromBigInt(<BigInt>value));
    }
  }

  get canceledReason(): string | null {
    let value = this.get("canceledReason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set canceledReason(value: string | null) {
    if (!value) {
      this.unset("canceledReason");
    } else {
      this.set("canceledReason", Value.fromString(<string>value));
    }
  }

  get dateFinalized(): BigInt | null {
    let value = this.get("dateFinalized");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateFinalized(value: BigInt | null) {
    if (!value) {
      this.unset("dateFinalized");
    } else {
      this.set("dateFinalized", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashCanceled(): Bytes | null {
    let value = this.get("transactionHashCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashCanceled(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashCanceled");
    } else {
      this.set("transactionHashCanceled", Value.fromBytes(<Bytes>value));
    }
  }

  get reservePriceInETH(): BigDecimal {
    let value = this.get("reservePriceInETH");
    return value!.toBigDecimal();
  }

  set reservePriceInETH(value: BigDecimal) {
    this.set("reservePriceInETH", Value.fromBigDecimal(value));
  }

  get initialBid(): string | null {
    let value = this.get("initialBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialBid(value: string | null) {
    if (!value) {
      this.unset("initialBid");
    } else {
      this.set("initialBid", Value.fromString(<string>value));
    }
  }

  get highestBid(): string | null {
    let value = this.get("highestBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set highestBid(value: string | null) {
    if (!value) {
      this.unset("highestBid");
    } else {
      this.set("highestBid", Value.fromString(<string>value));
    }
  }

  get bids(): Array<string> | null {
    let value = this.get("bids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bids(value: Array<string> | null) {
    if (!value) {
      this.unset("bids");
    } else {
      this.set("bids", Value.fromStringArray(<Array<string>>value));
    }
  }

  get duration(): BigInt | null {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt | null) {
    if (!value) {
      this.unset("duration");
    } else {
      this.set("duration", Value.fromBigInt(<BigInt>value));
    }
  }

  get extensionDuration(): BigInt | null {
    let value = this.get("extensionDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set extensionDuration(value: BigInt | null) {
    if (!value) {
      this.unset("extensionDuration");
    } else {
      this.set("extensionDuration", Value.fromBigInt(<BigInt>value));
    }
  }

  get isPrimarySale(): boolean {
    let value = this.get("isPrimarySale");
    return value!.toBoolean();
  }

  set isPrimarySale(value: boolean) {
    this.set("isPrimarySale", Value.fromBoolean(value));
  }

  get numberOfBids(): BigInt | null {
    let value = this.get("numberOfBids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numberOfBids(value: BigInt | null) {
    if (!value) {
      this.unset("numberOfBids");
    } else {
      this.set("numberOfBids", Value.fromBigInt(<BigInt>value));
    }
  }

  get bidVolumeInETH(): BigDecimal | null {
    let value = this.get("bidVolumeInETH");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set bidVolumeInETH(value: BigDecimal | null) {
    if (!value) {
      this.unset("bidVolumeInETH");
    } else {
      this.set("bidVolumeInETH", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get dateInvalidated(): BigInt | null {
    let value = this.get("dateInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateInvalidated(value: BigInt | null) {
    if (!value) {
      this.unset("dateInvalidated");
    } else {
      this.set("dateInvalidated", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashInvalidated(): Bytes | null {
    let value = this.get("transactionHashInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashInvalidated(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashInvalidated");
    } else {
      this.set("transactionHashInvalidated", Value.fromBytes(<Bytes>value));
    }
  }

  get dropAuction(): boolean {
    let value = this.get("dropAuction");
    return value!.toBoolean();
  }

  set dropAuction(value: boolean) {
    this.set("dropAuction", Value.fromBoolean(value));
  }

  get platformAuctionDropFeeBps(): BigInt | null {
    let value = this.get("platformAuctionDropFeeBps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set platformAuctionDropFeeBps(value: BigInt | null) {
    if (!value) {
      this.unset("platformAuctionDropFeeBps");
    } else {
      this.set("platformAuctionDropFeeBps", Value.fromBigInt(<BigInt>value));
    }
  }

  get dropCreatorAddress(): string | null {
    let value = this.get("dropCreatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dropCreatorAddress(value: string | null) {
    if (!value) {
      this.unset("dropCreatorAddress");
    } else {
      this.set("dropCreatorAddress", Value.fromString(<string>value));
    }
  }
}

export class FixedPriceSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FixedPriceSale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FixedPriceSale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FixedPriceSale", id.toString(), this);
    }
  }

  static load(id: string): FixedPriceSale | null {
    return changetype<FixedPriceSale | null>(store.get("FixedPriceSale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get nftContract(): string {
    let value = this.get("nftContract");
    return value!.toString();
  }

  set nftContract(value: string) {
    this.set("nftContract", Value.fromString(value));
  }

  get tokenId(): BigInt | null {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt | null) {
    if (!value) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get seller(): string | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seller(value: string | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromString(<string>value));
    }
  }

  get unitPriceInETH(): BigDecimal {
    let value = this.get("unitPriceInETH");
    return value!.toBigDecimal();
  }

  set unitPriceInETH(value: BigDecimal) {
    this.set("unitPriceInETH", Value.fromBigDecimal(value));
  }

  get limitPerAccount(): BigInt {
    let value = this.get("limitPerAccount");
    return value!.toBigInt();
  }

  set limitPerAccount(value: BigInt) {
    this.set("limitPerAccount", Value.fromBigInt(value));
  }

  get latestMint(): string | null {
    let value = this.get("latestMint");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set latestMint(value: string | null) {
    if (!value) {
      this.unset("latestMint");
    } else {
      this.set("latestMint", Value.fromString(<string>value));
    }
  }

  get mints(): Array<string> | null {
    let value = this.get("mints");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mints(value: Array<string> | null) {
    if (!value) {
      this.unset("mints");
    } else {
      this.set("mints", Value.fromStringArray(<Array<string>>value));
    }
  }

  get mintCount(): BigInt {
    let value = this.get("mintCount");
    return value!.toBigInt();
  }

  set mintCount(value: BigInt) {
    this.set("mintCount", Value.fromBigInt(value));
  }

  get amountInETH(): BigDecimal {
    let value = this.get("amountInETH");
    return value!.toBigDecimal();
  }

  set amountInETH(value: BigDecimal) {
    this.set("amountInETH", Value.fromBigDecimal(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get transactionHashCreated(): Bytes {
    let value = this.get("transactionHashCreated");
    return value!.toBytes();
  }

  set transactionHashCreated(value: Bytes) {
    this.set("transactionHashCreated", Value.fromBytes(value));
  }

  get whitelistSale(): boolean {
    let value = this.get("whitelistSale");
    return value!.toBoolean();
  }

  set whitelistSale(value: boolean) {
    this.set("whitelistSale", Value.fromBoolean(value));
  }

  get maxDropSupply(): BigInt | null {
    let value = this.get("maxDropSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxDropSupply(value: BigInt | null) {
    if (!value) {
      this.unset("maxDropSupply");
    } else {
      this.set("maxDropSupply", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class NftMarketContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketContract", id.toString(), this);
    }
  }

  static load(id: string): NftMarketContract | null {
    return changetype<NftMarketContract | null>(
      store.get("NftMarketContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numberOfBidsPlaced(): BigInt {
    let value = this.get("numberOfBidsPlaced");
    return value!.toBigInt();
  }

  set numberOfBidsPlaced(value: BigInt) {
    this.set("numberOfBidsPlaced", Value.fromBigInt(value));
  }
}

export class NftAccountApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftAccountApproval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftAccountApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftAccountApproval", id.toString(), this);
    }
  }

  static load(id: string): NftAccountApproval | null {
    return changetype<NftAccountApproval | null>(
      store.get("NftAccountApproval", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftContract(): string {
    let value = this.get("nftContract");
    return value!.toString();
  }

  set nftContract(value: string) {
    this.set("nftContract", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get spender(): string {
    let value = this.get("spender");
    return value!.toString();
  }

  set spender(value: string) {
    this.set("spender", Value.fromString(value));
  }
}

export class NftMarketAuction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketAuction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketAuction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketAuction", id.toString(), this);
    }
  }

  static load(id: string): NftMarketAuction | null {
    return changetype<NftMarketAuction | null>(
      store.get("NftMarketAuction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMarketContract(): string {
    let value = this.get("nftMarketContract");
    return value!.toString();
  }

  set nftMarketContract(value: string) {
    this.set("nftMarketContract", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auctionId(): BigInt {
    let value = this.get("auctionId");
    return value!.toBigInt();
  }

  set auctionId(value: BigInt) {
    this.set("auctionId", Value.fromBigInt(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get nftContract(): string {
    let value = this.get("nftContract");
    return value!.toString();
  }

  set nftContract(value: string) {
    this.set("nftContract", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get transactionHashCreated(): Bytes {
    let value = this.get("transactionHashCreated");
    return value!.toBytes();
  }

  set transactionHashCreated(value: Bytes) {
    this.set("transactionHashCreated", Value.fromBytes(value));
  }

  get dateStarted(): BigInt | null {
    let value = this.get("dateStarted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateStarted(value: BigInt | null) {
    if (!value) {
      this.unset("dateStarted");
    } else {
      this.set("dateStarted", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateUpdated(): BigInt | null {
    let value = this.get("dateUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateUpdated(value: BigInt | null) {
    if (!value) {
      this.unset("dateUpdated");
    } else {
      this.set("dateUpdated", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateEnding(): BigInt | null {
    let value = this.get("dateEnding");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateEnding(value: BigInt | null) {
    if (!value) {
      this.unset("dateEnding");
    } else {
      this.set("dateEnding", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateCanceled(): BigInt | null {
    let value = this.get("dateCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateCanceled(value: BigInt | null) {
    if (!value) {
      this.unset("dateCanceled");
    } else {
      this.set("dateCanceled", Value.fromBigInt(<BigInt>value));
    }
  }

  get canceledReason(): string | null {
    let value = this.get("canceledReason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set canceledReason(value: string | null) {
    if (!value) {
      this.unset("canceledReason");
    } else {
      this.set("canceledReason", Value.fromString(<string>value));
    }
  }

  get dateFinalized(): BigInt | null {
    let value = this.get("dateFinalized");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateFinalized(value: BigInt | null) {
    if (!value) {
      this.unset("dateFinalized");
    } else {
      this.set("dateFinalized", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashCanceled(): Bytes | null {
    let value = this.get("transactionHashCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashCanceled(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashCanceled");
    } else {
      this.set("transactionHashCanceled", Value.fromBytes(<Bytes>value));
    }
  }

  get reservePriceInETH(): BigDecimal {
    let value = this.get("reservePriceInETH");
    return value!.toBigDecimal();
  }

  set reservePriceInETH(value: BigDecimal) {
    this.set("reservePriceInETH", Value.fromBigDecimal(value));
  }

  get initialBid(): string | null {
    let value = this.get("initialBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialBid(value: string | null) {
    if (!value) {
      this.unset("initialBid");
    } else {
      this.set("initialBid", Value.fromString(<string>value));
    }
  }

  get highestBid(): string | null {
    let value = this.get("highestBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set highestBid(value: string | null) {
    if (!value) {
      this.unset("highestBid");
    } else {
      this.set("highestBid", Value.fromString(<string>value));
    }
  }

  get bids(): Array<string> | null {
    let value = this.get("bids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bids(value: Array<string> | null) {
    if (!value) {
      this.unset("bids");
    } else {
      this.set("bids", Value.fromStringArray(<Array<string>>value));
    }
  }

  get duration(): BigInt | null {
    let value = this.get("duration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt | null) {
    if (!value) {
      this.unset("duration");
    } else {
      this.set("duration", Value.fromBigInt(<BigInt>value));
    }
  }

  get extensionDuration(): BigInt | null {
    let value = this.get("extensionDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set extensionDuration(value: BigInt | null) {
    if (!value) {
      this.unset("extensionDuration");
    } else {
      this.set("extensionDuration", Value.fromBigInt(<BigInt>value));
    }
  }

  get isPrimarySale(): boolean {
    let value = this.get("isPrimarySale");
    return value!.toBoolean();
  }

  set isPrimarySale(value: boolean) {
    this.set("isPrimarySale", Value.fromBoolean(value));
  }

  get numberOfBids(): BigInt | null {
    let value = this.get("numberOfBids");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numberOfBids(value: BigInt | null) {
    if (!value) {
      this.unset("numberOfBids");
    } else {
      this.set("numberOfBids", Value.fromBigInt(<BigInt>value));
    }
  }

  get bidVolumeInETH(): BigDecimal | null {
    let value = this.get("bidVolumeInETH");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set bidVolumeInETH(value: BigDecimal | null) {
    if (!value) {
      this.unset("bidVolumeInETH");
    } else {
      this.set("bidVolumeInETH", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get dateInvalidated(): BigInt | null {
    let value = this.get("dateInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateInvalidated(value: BigInt | null) {
    if (!value) {
      this.unset("dateInvalidated");
    } else {
      this.set("dateInvalidated", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashInvalidated(): Bytes | null {
    let value = this.get("transactionHashInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashInvalidated(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashInvalidated");
    } else {
      this.set("transactionHashInvalidated", Value.fromBytes(<Bytes>value));
    }
  }

  get dropAuction(): boolean {
    let value = this.get("dropAuction");
    return value!.toBoolean();
  }

  set dropAuction(value: boolean) {
    this.set("dropAuction", Value.fromBoolean(value));
  }

  get auctionPrimarySale(): string | null {
    let value = this.get("auctionPrimarySale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auctionPrimarySale(value: string | null) {
    if (!value) {
      this.unset("auctionPrimarySale");
    } else {
      this.set("auctionPrimarySale", Value.fromString(<string>value));
    }
  }
}

export class NftMarketBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketBid", id.toString(), this);
    }
  }

  static load(id: string): NftMarketBid | null {
    return changetype<NftMarketBid | null>(store.get("NftMarketBid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMarketAuction(): string | null {
    let value = this.get("nftMarketAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftMarketAuction(value: string | null) {
    if (!value) {
      this.unset("nftMarketAuction");
    } else {
      this.set("nftMarketAuction", Value.fromString(<string>value));
    }
  }

  get auctionPrimarySale(): string | null {
    let value = this.get("auctionPrimarySale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auctionPrimarySale(value: string | null) {
    if (!value) {
      this.unset("auctionPrimarySale");
    } else {
      this.set("auctionPrimarySale", Value.fromString(<string>value));
    }
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get bidder(): string {
    let value = this.get("bidder");
    return value!.toString();
  }

  set bidder(value: string) {
    this.set("bidder", Value.fromString(value));
  }

  get datePlaced(): BigInt {
    let value = this.get("datePlaced");
    return value!.toBigInt();
  }

  set datePlaced(value: BigInt) {
    this.set("datePlaced", Value.fromBigInt(value));
  }

  get transactionHashPlaced(): Bytes {
    let value = this.get("transactionHashPlaced");
    return value!.toBytes();
  }

  set transactionHashPlaced(value: Bytes) {
    this.set("transactionHashPlaced", Value.fromBytes(value));
  }

  get amountInETH(): BigDecimal {
    let value = this.get("amountInETH");
    return value!.toBigDecimal();
  }

  set amountInETH(value: BigDecimal) {
    this.set("amountInETH", Value.fromBigDecimal(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get dateLeftActiveStatus(): BigInt | null {
    let value = this.get("dateLeftActiveStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateLeftActiveStatus(value: BigInt | null) {
    if (!value) {
      this.unset("dateLeftActiveStatus");
    } else {
      this.set("dateLeftActiveStatus", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashLeftActiveStatus(): Bytes | null {
    let value = this.get("transactionHashLeftActiveStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashLeftActiveStatus(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashLeftActiveStatus");
    } else {
      this.set(
        "transactionHashLeftActiveStatus",
        Value.fromBytes(<Bytes>value)
      );
    }
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get extendedAuction(): boolean {
    let value = this.get("extendedAuction");
    return value!.toBoolean();
  }

  set extendedAuction(value: boolean) {
    this.set("extendedAuction", Value.fromBoolean(value));
  }

  get outbidByBid(): string | null {
    let value = this.get("outbidByBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outbidByBid(value: string | null) {
    if (!value) {
      this.unset("outbidByBid");
    } else {
      this.set("outbidByBid", Value.fromString(<string>value));
    }
  }

  get bidThisOutbid(): string | null {
    let value = this.get("bidThisOutbid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bidThisOutbid(value: string | null) {
    if (!value) {
      this.unset("bidThisOutbid");
    } else {
      this.set("bidThisOutbid", Value.fromString(<string>value));
    }
  }

  get bidWinnerHasClaim(): boolean {
    let value = this.get("bidWinnerHasClaim");
    return value!.toBoolean();
  }

  set bidWinnerHasClaim(value: boolean) {
    this.set("bidWinnerHasClaim", Value.fromBoolean(value));
  }

  get listerHasClaim(): boolean {
    let value = this.get("listerHasClaim");
    return value!.toBoolean();
  }

  set listerHasClaim(value: boolean) {
    this.set("listerHasClaim", Value.fromBoolean(value));
  }
}

export class NftHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftHistory", id.toString(), this);
    }
  }

  static load(id: string): NftHistory | null {
    return changetype<NftHistory | null>(store.get("NftHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get auction(): string | null {
    let value = this.get("auction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auction(value: string | null) {
    if (!value) {
      this.unset("auction");
    } else {
      this.set("auction", Value.fromString(<string>value));
    }
  }

  get offer(): string | null {
    let value = this.get("offer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set offer(value: string | null) {
    if (!value) {
      this.unset("offer");
    } else {
      this.set("offer", Value.fromString(<string>value));
    }
  }

  get buyNow(): string | null {
    let value = this.get("buyNow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyNow(value: string | null) {
    if (!value) {
      this.unset("buyNow");
    } else {
      this.set("buyNow", Value.fromString(<string>value));
    }
  }

  get dropAuction(): string | null {
    let value = this.get("dropAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dropAuction(value: string | null) {
    if (!value) {
      this.unset("dropAuction");
    } else {
      this.set("dropAuction", Value.fromString(<string>value));
    }
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    return value!.toBigInt();
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get marketplace(): string | null {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string | null) {
    if (!value) {
      this.unset("marketplace");
    } else {
      this.set("marketplace", Value.fromString(<string>value));
    }
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get actorAccount(): string {
    let value = this.get("actorAccount");
    return value!.toString();
  }

  set actorAccount(value: string) {
    this.set("actorAccount", Value.fromString(value));
  }

  get txOrigin(): string {
    let value = this.get("txOrigin");
    return value!.toString();
  }

  set txOrigin(value: string) {
    this.set("txOrigin", Value.fromString(value));
  }

  get nftRecipient(): string | null {
    let value = this.get("nftRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftRecipient(value: string | null) {
    if (!value) {
      this.unset("nftRecipient");
    } else {
      this.set("nftRecipient", Value.fromString(<string>value));
    }
  }

  get amountInETH(): BigDecimal | null {
    let value = this.get("amountInETH");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountInETH(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountInETH");
    } else {
      this.set("amountInETH", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get amountInTokens(): BigInt | null {
    let value = this.get("amountInTokens");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountInTokens(value: BigInt | null) {
    if (!value) {
      this.unset("amountInTokens");
    } else {
      this.set("amountInTokens", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(<Bytes>value));
    }
  }
}

export class CollectionContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectionContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionContract", id.toString(), this);
    }
  }

  static load(id: string): CollectionContract | null {
    return changetype<CollectionContract | null>(
      store.get("CollectionContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftContract(): string {
    let value = this.get("nftContract");
    return value!.toString();
  }

  set nftContract(value: string) {
    this.set("nftContract", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get version(): string {
    let value = this.get("version");
    return value!.toString();
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get dateSelfDestructed(): BigInt | null {
    let value = this.get("dateSelfDestructed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateSelfDestructed(value: BigInt | null) {
    if (!value) {
      this.unset("dateSelfDestructed");
    } else {
      this.set("dateSelfDestructed", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class NftMarketOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketOffer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketOffer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketOffer", id.toString(), this);
    }
  }

  static load(id: string): NftMarketOffer | null {
    return changetype<NftMarketOffer | null>(store.get("NftMarketOffer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMarketContract(): string {
    let value = this.get("nftMarketContract");
    return value!.toString();
  }

  set nftMarketContract(value: string) {
    this.set("nftMarketContract", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get nftContract(): string {
    let value = this.get("nftContract");
    return value!.toString();
  }

  set nftContract(value: string) {
    this.set("nftContract", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get seller(): string | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seller(value: string | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromString(<string>value));
    }
  }

  get amountInETH(): BigDecimal {
    let value = this.get("amountInETH");
    return value!.toBigDecimal();
  }

  set amountInETH(value: BigDecimal) {
    this.set("amountInETH", Value.fromBigDecimal(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get transactionHashCreated(): Bytes {
    let value = this.get("transactionHashCreated");
    return value!.toBytes();
  }

  set transactionHashCreated(value: Bytes) {
    this.set("transactionHashCreated", Value.fromBytes(value));
  }

  get dateExpires(): BigInt {
    let value = this.get("dateExpires");
    return value!.toBigInt();
  }

  set dateExpires(value: BigInt) {
    this.set("dateExpires", Value.fromBigInt(value));
  }

  get dateCanceled(): BigInt | null {
    let value = this.get("dateCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateCanceled(value: BigInt | null) {
    if (!value) {
      this.unset("dateCanceled");
    } else {
      this.set("dateCanceled", Value.fromBigInt(<BigInt>value));
    }
  }

  get canceledReason(): string | null {
    let value = this.get("canceledReason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set canceledReason(value: string | null) {
    if (!value) {
      this.unset("canceledReason");
    } else {
      this.set("canceledReason", Value.fromString(<string>value));
    }
  }

  get transactionHashCanceled(): Bytes | null {
    let value = this.get("transactionHashCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashCanceled(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashCanceled");
    } else {
      this.set("transactionHashCanceled", Value.fromBytes(<Bytes>value));
    }
  }

  get dateAccepted(): BigInt | null {
    let value = this.get("dateAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateAccepted(value: BigInt | null) {
    if (!value) {
      this.unset("dateAccepted");
    } else {
      this.set("dateAccepted", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashAccepted(): Bytes | null {
    let value = this.get("transactionHashAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashAccepted(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashAccepted");
    } else {
      this.set("transactionHashAccepted", Value.fromBytes(<Bytes>value));
    }
  }

  get dateOutbid(): BigInt | null {
    let value = this.get("dateOutbid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateOutbid(value: BigInt | null) {
    if (!value) {
      this.unset("dateOutbid");
    } else {
      this.set("dateOutbid", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashOutbid(): Bytes | null {
    let value = this.get("transactionHashOutbid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashOutbid(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashOutbid");
    } else {
      this.set("transactionHashOutbid", Value.fromBytes(<Bytes>value));
    }
  }

  get dateInvalidated(): BigInt | null {
    let value = this.get("dateInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateInvalidated(value: BigInt | null) {
    if (!value) {
      this.unset("dateInvalidated");
    } else {
      this.set("dateInvalidated", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashInvalidated(): Bytes | null {
    let value = this.get("transactionHashInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashInvalidated(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashInvalidated");
    } else {
      this.set("transactionHashInvalidated", Value.fromBytes(<Bytes>value));
    }
  }

  get outbidOffer(): string | null {
    let value = this.get("outbidOffer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outbidOffer(value: string | null) {
    if (!value) {
      this.unset("outbidOffer");
    } else {
      this.set("outbidOffer", Value.fromString(<string>value));
    }
  }

  get offerOutbidBy(): string | null {
    let value = this.get("offerOutbidBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set offerOutbidBy(value: string | null) {
    if (!value) {
      this.unset("offerOutbidBy");
    } else {
      this.set("offerOutbidBy", Value.fromString(<string>value));
    }
  }
}

export class NftMarketBuyNow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftMarketBuyNow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NftMarketBuyNow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NftMarketBuyNow", id.toString(), this);
    }
  }

  static load(id: string): NftMarketBuyNow | null {
    return changetype<NftMarketBuyNow | null>(store.get("NftMarketBuyNow", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftMarketContract(): string {
    let value = this.get("nftMarketContract");
    return value!.toString();
  }

  set nftMarketContract(value: string) {
    this.set("nftMarketContract", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get nftContract(): string {
    let value = this.get("nftContract");
    return value!.toString();
  }

  set nftContract(value: string) {
    this.set("nftContract", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get directId(): BigInt {
    let value = this.get("directId");
    return value!.toBigInt();
  }

  set directId(value: BigInt) {
    this.set("directId", Value.fromBigInt(value));
  }

  get amountInETH(): BigDecimal {
    let value = this.get("amountInETH");
    return value!.toBigDecimal();
  }

  set amountInETH(value: BigDecimal) {
    this.set("amountInETH", Value.fromBigDecimal(value));
  }

  get dateCreated(): BigInt {
    let value = this.get("dateCreated");
    return value!.toBigInt();
  }

  set dateCreated(value: BigInt) {
    this.set("dateCreated", Value.fromBigInt(value));
  }

  get dateUpdated(): BigInt | null {
    let value = this.get("dateUpdated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateUpdated(value: BigInt | null) {
    if (!value) {
      this.unset("dateUpdated");
    } else {
      this.set("dateUpdated", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateEnding(): BigInt {
    let value = this.get("dateEnding");
    return value!.toBigInt();
  }

  set dateEnding(value: BigInt) {
    this.set("dateEnding", Value.fromBigInt(value));
  }

  get transactionHashCreated(): Bytes {
    let value = this.get("transactionHashCreated");
    return value!.toBytes();
  }

  set transactionHashCreated(value: Bytes) {
    this.set("transactionHashCreated", Value.fromBytes(value));
  }

  get buyer(): string | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyer(value: string | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromString(<string>value));
    }
  }

  get dateCanceled(): BigInt | null {
    let value = this.get("dateCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateCanceled(value: BigInt | null) {
    if (!value) {
      this.unset("dateCanceled");
    } else {
      this.set("dateCanceled", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashCanceled(): Bytes | null {
    let value = this.get("transactionHashCanceled");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashCanceled(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashCanceled");
    } else {
      this.set("transactionHashCanceled", Value.fromBytes(<Bytes>value));
    }
  }

  get dateAccepted(): BigInt | null {
    let value = this.get("dateAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateAccepted(value: BigInt | null) {
    if (!value) {
      this.unset("dateAccepted");
    } else {
      this.set("dateAccepted", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashAccepted(): Bytes | null {
    let value = this.get("transactionHashAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashAccepted(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashAccepted");
    } else {
      this.set("transactionHashAccepted", Value.fromBytes(<Bytes>value));
    }
  }

  get dateInvalidated(): BigInt | null {
    let value = this.get("dateInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateInvalidated(value: BigInt | null) {
    if (!value) {
      this.unset("dateInvalidated");
    } else {
      this.set("dateInvalidated", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHashInvalidated(): Bytes | null {
    let value = this.get("transactionHashInvalidated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transactionHashInvalidated(value: Bytes | null) {
    if (!value) {
      this.unset("transactionHashInvalidated");
    } else {
      this.set("transactionHashInvalidated", Value.fromBytes(<Bytes>value));
    }
  }

  get isPrimarySale(): boolean {
    let value = this.get("isPrimarySale");
    return value!.toBoolean();
  }

  set isPrimarySale(value: boolean) {
    this.set("isPrimarySale", Value.fromBoolean(value));
  }
}
